/**
 * Computes a topShadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function top-shadow($depth) {
  $primaryOffset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(0.12 0.16 0.19 0.25 0.3, $depth));
  @return 0 $primaryOffset $blur $color;
}

/**
 * Computes a bottomShadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function bottom-shadow($depth) {
  $primaryOffset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(0.24 0.23 0.23 0.22 0.22, $depth));
  @return 0 $primaryOffset $blur $color;
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} topShadow
/// @requires {function} bottomShadow
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn 'Invalid $depth `#{$depth}` for mixin `card`.';
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}
